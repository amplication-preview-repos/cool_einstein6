/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Design as PrismaDesign,
  Template as PrismaTemplate,
} from "@prisma/client";

export class DesignServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DesignCountArgs, "select">): Promise<number> {
    return this.prisma.design.count(args);
  }

  async designs<T extends Prisma.DesignFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignFindManyArgs>
  ): Promise<PrismaDesign[]> {
    return this.prisma.design.findMany<Prisma.DesignFindManyArgs>(args);
  }
  async design<T extends Prisma.DesignFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignFindUniqueArgs>
  ): Promise<PrismaDesign | null> {
    return this.prisma.design.findUnique(args);
  }
  async createDesign<T extends Prisma.DesignCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignCreateArgs>
  ): Promise<PrismaDesign> {
    return this.prisma.design.create<T>(args);
  }
  async updateDesign<T extends Prisma.DesignUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignUpdateArgs>
  ): Promise<PrismaDesign> {
    return this.prisma.design.update<T>(args);
  }
  async deleteDesign<T extends Prisma.DesignDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignDeleteArgs>
  ): Promise<PrismaDesign> {
    return this.prisma.design.delete(args);
  }

  async getTemplate(parentId: string): Promise<PrismaTemplate | null> {
    return this.prisma.design
      .findUnique({
        where: { id: parentId },
      })
      .template();
  }
}
