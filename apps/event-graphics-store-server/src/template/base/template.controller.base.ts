/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TemplateService } from "../template.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TemplateCreateInput } from "./TemplateCreateInput";
import { Template } from "./Template";
import { TemplateFindManyArgs } from "./TemplateFindManyArgs";
import { TemplateWhereUniqueInput } from "./TemplateWhereUniqueInput";
import { TemplateUpdateInput } from "./TemplateUpdateInput";
import { DesignFindManyArgs } from "../../design/base/DesignFindManyArgs";
import { Design } from "../../design/base/Design";
import { DesignWhereUniqueInput } from "../../design/base/DesignWhereUniqueInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TemplateControllerBase {
  constructor(
    protected readonly service: TemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Template })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTemplate(
    @common.Body() data: TemplateCreateInput
  ): Promise<Template> {
    return await this.service.createTemplate({
      data: data,
      select: {
        createdAt: true,
        description: true,
        design: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Template] })
  @ApiNestedQuery(TemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async templates(@common.Req() request: Request): Promise<Template[]> {
    const args = plainToClass(TemplateFindManyArgs, request.query);
    return this.service.templates({
      ...args,
      select: {
        createdAt: true,
        description: true,
        design: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async template(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    const result = await this.service.template({
      where: params,
      select: {
        createdAt: true,
        description: true,
        design: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTemplate(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() data: TemplateUpdateInput
  ): Promise<Template | null> {
    try {
      return await this.service.updateTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          design: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTemplate(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    try {
      return await this.service.deleteTemplate({
        where: params,
        select: {
          createdAt: true,
          description: true,
          design: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/designs")
  @ApiNestedQuery(DesignFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Design",
    action: "read",
    possession: "any",
  })
  async findDesigns(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Design[]> {
    const query = plainToClass(DesignFindManyArgs, request.query);
    const results = await this.service.findDesigns(params.id, {
      ...query,
      select: {
        assets: true,
        createdAt: true,
        id: true,

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/designs")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectDesigns(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: DesignWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      designs: {
        connect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/designs")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateDesigns(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: DesignWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      designs: {
        set: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/designs")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectDesigns(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: DesignWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      designs: {
        disconnect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        template: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectProjects(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateProjects(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectProjects(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
